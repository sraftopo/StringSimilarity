const axios = require('axios');

const SERVER_URL = 'http://localhost:3031';

// Example 1: Product search
async function productSearch() {
    console.log('üõçÔ∏è Example 1: Product Search\n');
    
    const productData = {
        inputString: "ŒëŒ∫œÑŒπŒΩŒøŒ∏ŒµœÅŒ±œÄŒµŒØŒ± Œ∫Œ±Œ∏ŒøŒ¥Œ∑Œ≥ŒøœçŒºŒµŒΩŒ∑ Œ±œÄŒµŒπŒ∫ŒøŒΩŒπœÉœÑŒπŒ∫Œ¨ (IGRT)",
        arrayOfObjects: [{"PracticeTypeID":20,"ApplicationCategoryID":3,"PracticeID":20,"PracticeTypeTitle":"ŒúŒ±œÉœÑŒøŒ≥œÅŒ±œÜŒØŒµœÇ œÑŒøŒºŒøœÉœçŒΩŒ∏ŒµœÉŒ∑œÇ Œ∫Œ±Œπ œÉœÑŒµœÅŒµŒøœÑŒ±Œ∫œÑŒπŒ∫ŒÆœÇ Œ≤ŒπŒøœàŒØŒ±œÇ ŒµŒΩœÑœåœÇ œÑŒºŒ∑ŒºŒ¨œÑœâŒΩ ŒπŒ±œÑœÅŒπŒ∫ŒÆœÇ Œ±œÄŒµŒπŒ∫œåŒΩŒπœÉŒ∑œÇ, ŒΩŒøœÉŒøŒ∫ŒøŒºŒµŒØŒøœÖ ŒÆ ŒπŒ¥ŒπœâœÑŒπŒ∫ŒÆœÇ Œ∫ŒªŒπŒΩŒπŒ∫ŒÆœÇ\/Œ¥ŒπŒ±Œ≥ŒΩœâœÉœÑŒπŒ∫Œøœç Œ∫Œ≠ŒΩœÑœÅŒøœÖ"},{"PracticeTypeID":21,"ApplicationCategoryID":3,"PracticeID":20,"PracticeTypeTitle":"ŒîŒπŒ±Œ≥ŒΩœâœÉœÑŒπŒ∫ŒÆ Œ∫Œ±Œπ ŒµœÄŒµŒºŒ≤Œ±œÑŒπŒ∫ŒÆ Œ±Œ∫œÑŒπŒΩŒøœÉŒ∫œåœÄŒ∑œÉŒ∑ ŒµŒΩœÑœåœÇ œÑŒºŒÆŒºŒ±œÑŒøœÇ ŒπŒ±œÑœÅŒπŒ∫ŒÆœÇ Œ±œÄŒµŒπŒ∫œåŒΩŒπœÉŒ∑œÇ ŒΩŒøœÉŒøŒ∫ŒøŒºŒµŒØŒøœÖ ŒÆ ŒπŒ¥ŒπœâœÑŒπŒ∫ŒÆœÇ Œ∫ŒªŒπŒΩŒπŒ∫ŒÆœÇ"},{"PracticeTypeID":22,"ApplicationCategoryID":3,"PracticeID":20,"PracticeTypeTitle":"ŒîŒπŒ±Œ≥ŒΩœâœÉœÑŒπŒ∫ŒÆ Œ∫Œ±Œπ ŒµœÄŒµŒºŒ≤Œ±œÑŒπŒ∫ŒÆ Œ±Œ∫œÑŒπŒΩŒøœÉŒ∫œåœÄŒ∑œÉŒ∑ ŒµŒ∫œÑœåœÇ œÑŒºŒÆŒºŒ±œÑŒøœÇ ŒπŒ±œÑœÅŒπŒ∫ŒÆœÇ Œ±œÄŒµŒπŒ∫œåŒΩŒπœÉŒ∑œÇ ŒµŒΩœÑœåœÇ ŒΩŒøœÉŒøŒ∫ŒøŒºŒµŒØŒøœÖ\r\nŒÆ ŒπŒ¥ŒπœâœÑŒπŒ∫ŒÆœÇ Œ∫ŒªŒπŒΩŒπŒ∫ŒÆœÇ (œåœÄœâœÇ ŒµŒΩŒ¥ŒµŒπŒ∫œÑŒπŒ∫Œ¨ œÑŒºŒÆŒºŒ±œÑŒ± ŒøœÅŒ∏ŒøœÄŒ±ŒπŒ¥ŒπŒ∫Œ¨, Œ≥Œ±œÉœÑœÅŒµŒΩœÑŒµœÅŒøŒªŒøŒ≥ŒπŒ∫Œ¨, ŒøœÖœÅŒøŒªŒøŒ≥ŒπŒ∫Œ¨,\r\nœáŒµŒπœÅŒøœÖœÅŒ≥ŒπŒ∫Œ¨, Œ±Œ≥Œ≥ŒµŒπŒøœáŒµŒπœÅŒøœÖœÅŒ≥ŒπŒ∫Œ¨, Œ∫ŒªœÄ)"},{"PracticeTypeID":23,"ApplicationCategoryID":3,"PracticeID":20,"PracticeTypeTitle":"ŒîŒπŒ±Œ≥ŒΩœâœÉœÑŒπŒ∫ŒÆ Œ∫Œ±Œπ ŒµœÄŒµŒºŒ≤Œ±œÑŒπŒ∫ŒÆ œÖœÄŒøŒªŒøŒ≥ŒπœÉœÑŒπŒ∫ŒÆ œÑŒøŒºŒøŒ≥œÅŒ±œÜŒØŒ± ŒµŒΩœÑœåœÇ œÑŒºŒÆŒºŒ±œÑŒøœÇ ŒπŒ±œÑœÅŒπŒ∫ŒÆœÇ Œ±œÄŒµŒπŒ∫œåŒΩŒπœÉŒ∑œÇ\r\nŒΩŒøœÉŒøŒ∫ŒøŒºŒµŒØŒøœÖ ŒÆ ŒπŒ¥ŒπœâœÑŒπŒ∫ŒÆœÇ Œ∫ŒªŒπŒΩŒπŒ∫ŒÆœÇ\/Œ¥ŒπŒ±Œ≥ŒΩœâœÉœÑŒπŒ∫Œøœç Œ∫Œ≠ŒΩœÑœÅŒøœÖ"},{"PracticeTypeID":24,"ApplicationCategoryID":3,"PracticeID":20,"PracticeTypeTitle":"ŒïœÄŒµŒºŒ≤Œ±œÑŒπŒ∫Œ≠œÇ Œ±Œ∫œÑŒπŒΩŒøŒªŒøŒ≥ŒπŒ∫Œ≠œÇ œÄœÅŒ±Œ∫œÑŒπŒ∫Œ≠œÇ œÉŒµ Œ±Œ≥Œ≥ŒµŒπŒøŒ≥œÅŒ¨œÜŒø ŒµŒΩœÑœåœÇ œÑŒºŒÆŒºŒ±œÑŒøœÇ ŒπŒ±œÑœÅŒπŒ∫ŒÆœÇ Œ±œÄŒµŒπŒ∫œåŒΩŒπœÉŒ∑œÇ\r\nŒΩŒøœÉŒøŒ∫ŒøŒºŒµŒØŒøœÖ ŒÆ ŒπŒ¥ŒπœâœÑŒπŒ∫ŒÆœÇ Œ∫ŒªŒπŒΩŒπŒ∫ŒÆœÇ"},{"PracticeTypeID":25,"ApplicationCategoryID":3,"PracticeID":20,"PracticeTypeTitle":"ŒïœÄŒµŒºŒ≤Œ±œÑŒπŒ∫Œ≠œÇ Œ∫Œ±œÅŒ¥ŒπŒøŒªŒøŒ≥ŒπŒ∫Œ≠œÇ œÄœÅŒ±Œ∫œÑŒπŒ∫Œ≠œÇ (œåœÄœâœÇ ŒµŒΩŒ¥ŒµŒπŒ∫œÑŒπŒ∫Œ¨ Œ±ŒπŒºŒøŒ¥œÖŒΩŒ±ŒºŒπŒ∫ŒÆ-Œ∑ŒªŒµŒ∫œÑœÅŒøœÜœÖœÉŒπŒøŒªŒøŒ≥ŒØŒ±œÑŒøœÄŒøŒ∏Œ≠œÑŒ∑œÉŒ∑ Œ≤Œ∑ŒºŒ±œÑŒøŒ¥ŒøœÑœéŒΩ\/Œ±œÄŒπŒΩŒπŒ¥œâœÑœéŒΩ, Œ±ŒΩœÑŒπŒ∫Œ±œÑŒ¨œÉœÑŒ±œÉŒ∑ Œ≤Œ±ŒªŒ≤ŒØŒ¥œâŒΩ) œÉŒµ œÉœÑŒµœÜŒ±ŒΩŒπŒøŒ≥œÅŒ¨œÜŒø ŒµŒΩœÑœåœÇ\r\nŒΩŒøœÉŒøŒ∫ŒøŒºŒµŒØŒøœÖ ŒÆ ŒπŒ¥ŒπœâœÑŒπŒ∫ŒÆœÇ Œ∫ŒªŒπŒΩŒπŒ∫ŒÆœÇ"},{"PracticeTypeID":26,"ApplicationCategoryID":3,"PracticeID":20,"PracticeTypeTitle":"ŒõŒµŒπœÑŒøœÖœÅŒ≥ŒØŒ± ŒµŒæŒøŒºŒøŒπœâœÑŒÆ œÉœÑŒ∑ŒΩ Œ±Œ∫œÑŒπŒΩŒøŒ∏ŒµœÅŒ±œÄŒµŒØŒ±"},{"PracticeTypeID":27,"ApplicationCategoryID":3,"PracticeID":20,"PracticeTypeTitle":"ŒïŒæœâœÑŒµœÅŒπŒ∫ŒÆ Œ±Œ∫œÑŒπŒΩŒøŒ∏ŒµœÅŒ±œÄŒµŒØŒ± ŒºŒµ (Œ±) Œ±Œ∫œÑŒØŒΩŒµœÇ Œß (Œ≤) Œ¥Œ≠œÉŒºŒµœÇ Œ∑ŒªŒµŒ∫œÑœÅŒøŒΩŒØœâŒΩ"},{"PracticeTypeID":28,"ApplicationCategoryID":3,"PracticeID":20,"PracticeTypeTitle":"(Œ±) ŒïŒæœâœÑŒµœÅŒπŒ∫ŒÆ Œ±Œ∫œÑŒπŒΩŒøŒ∏ŒµœÅŒ±œÄŒµŒØŒ± Œ¥ŒπŒ±ŒºŒøœÅœÜŒøœçŒºŒµŒΩŒ∑œÇ Œ≠ŒΩœÑŒ±œÉŒ∑œÇ Œ±Œ∫œÑŒπŒΩŒøŒ≤œåŒªŒ∑œÉŒ∑œÇ (IMRT), (Œ≤) Œ±Œ∫œÑŒπŒΩŒøŒ∏ŒµœÅŒ±œÄŒµŒØŒ±\r\nŒ∫Œ±Œ∏ŒøŒ¥Œ∑Œ≥ŒøœçŒºŒµŒΩŒ∑ Œ±œÄŒµŒπŒ∫ŒøŒΩŒπœÉœÑŒπŒ∫Œ¨ (IGRT), (Œ≥) ŒøŒ≥Œ∫ŒøŒºŒµœÑœÅŒπŒ∫ŒÆ Œ±Œ∫œÑŒπŒΩŒøŒ∏ŒµœÅŒ±œÄŒµŒØŒ± Œ¥ŒπŒ±ŒºŒøœÅœÜŒøœçŒºŒµŒΩŒ∑œÇ Œ≠ŒΩœÑŒ±œÉŒ∑œÇ (VMAT),\r\n(Œ¥) œÉœÑŒµœÅŒµŒøœÑŒ±Œ∫œÑŒπŒ∫ŒÆ‚Äì Œ±Œ∫œÑŒπŒΩŒøœáŒµŒπœÅŒøœÖœÅŒ≥ŒπŒ∫ŒÆ (SRS , SBRT) ŒºŒµ Œ¥Œ≠œÉŒºŒµœÇ Œ±Œ∫œÑŒØŒΩœâŒΩ Œß"},{"PracticeTypeID":29,"ApplicationCategoryID":3,"PracticeID":20,"PracticeTypeTitle":"ŒüŒªœåœÉœâŒºŒ∑ Œ±Œ∫œÑŒπŒΩŒøŒ≤œåŒªŒ∑œÉŒ∑ (TBI)"},{"PracticeTypeID":30,"ApplicationCategoryID":3,"PracticeID":20,"PracticeTypeTitle":"ŒíœÅŒ±œáœÖŒ∏ŒµœÅŒ±œÄŒµŒØŒ± ŒºŒµ œáœÅŒÆœÉŒ∑ Œ±Œ∫œÑŒØŒΩœâŒΩ Œß"}],
        elementToCheck: "PracticeTypeTitle"
    };
    
    try {
        const response = await axios.post(`${SERVER_URL}/compare`, productData);
        const result = response.data;
        
        console.log(`Searching for: "${result.inputString}"`);
        console.log(`Found ${result.resultsReturned} matches out of ${result.totalCompared} products\n`);
        
        console.log('Top 3 matches:');
        result.results.slice(0, 3).forEach((match, index) => {
            console.log(`${index + 1}. ${match.targetString} (Score: ${match.score}) - $${match.originalObject.PracticeTypeID}`);
        });
        
    } catch (error) {
        console.error('Error:', error.message);
    }
}

// Example 2: Document similarity
async function documentSimilarity() {
    console.log('\nüìÑ Example 2: Document Similarity\n');
    
    const documentData = {
        inputString: "Machine learning is a subset of artificial intelligence",
        arrayOfObjects: [
            { id: 1, title: "Introduction to AI", content: "Artificial intelligence is the simulation of human intelligence", category: "AI" },
            { id: 2, title: "ML Basics", content: "Machine learning is a subset of artificial intelligence", category: "ML" },
            { id: 3, title: "Deep Learning", content: "Deep learning uses neural networks with multiple layers", category: "DL" },
            { id: 4, title: "Data Science", content: "Data science combines statistics and programming", category: "DS" },
            { id: 5, title: "Computer Vision", content: "Computer vision enables machines to interpret visual information", category: "CV" }
        ],
        elementToCheck: "content"
    };
    
    try {
        const response = await axios.post(`${SERVER_URL}/compare`, documentData);
        const result = response.data;
        
        console.log(`Query: "${result.inputString}"`);
        console.log(`Found ${result.resultsReturned} similar documents\n`);
        
        console.log('Document matches:');
        result.results.forEach((match, index) => {
            console.log(`${index + 1}. [${match.originalObject.category}] ${match.originalObject.title}`);
            console.log(`   Content: "${match.targetString}"`);
            console.log(`   Similarity: ${match.score}\n`);
        });
        
    } catch (error) {
        console.error('Error:', error.message);
    }
}

// Example 3: User search
async function userSearch() {
    console.log('üë• Example 3: User Search\n');
    
    const userData = {
        inputString: "John Smith",
        arrayOfObjects: [
            { id: 1, name: "John Smith", email: "john.smith@email.com", department: "Engineering" },
            { id: 2, name: "Jane Smith", email: "jane.smith@email.com", department: "Marketing" },
            { id: 3, name: "Johnny Smith", email: "johnny@email.com", department: "Sales" },
            { id: 4, name: "Bob Johnson", email: "bob.johnson@email.com", department: "HR" },
            { id: 5, name: "John Doe", email: "john.doe@email.com", department: "Finance" }
        ],
        elementToCheck: "name"
    };
    
    try {
        const response = await axios.post(`${SERVER_URL}/compare`, userData);
        const result = response.data;
        
        console.log(`Searching for: "${result.inputString}"`);
        console.log(`Found ${result.resultsReturned} users\n`);
        
        console.log('User matches:');
        result.results.forEach((match, index) => {
            console.log(`${index + 1}. ${match.targetString} (${match.originalObject.email}) - ${match.originalObject.department}`);
            console.log(`   Similarity: ${match.score}\n`);
        });
        
    } catch (error) {
        console.error('Error:', error.message);
    }
}

// Run all examples
async function runExamples() {
    try {
        await productSearch();
        await documentSimilarity();
        await userSearch();
        
        console.log('‚úÖ All examples completed successfully!');
    } catch (error) {
        console.error('‚ùå Examples failed:', error.message);
    }
}

// Check if server is running first
async function checkServer() {
    try {
        await axios.get(`${SERVER_URL}/health`);
        return true;
    } catch (error) {
        console.error('‚ùå Server is not running. Please start the server with: npm start');
        return false;
    }
}

// Main execution
async function main() {
    const serverRunning = await checkServer();
    if (serverRunning) {
        await runExamples();
    }
}

main();
