const axios = require('axios');

const SERVER_URL = 'http://localhost:3031';

async function testNewAPI() {
    console.log('üß™ Testing New API with inputObject...\n');
    
    try {
        // Test 1: Medical practice search
        console.log('1. Testing medical practice search...');
        const medicalData = {
            inputObject: {
                id: 1,
                title: "ŒëŒ∫œÑŒπŒΩŒøŒ∏ŒµœÅŒ±œÄŒµŒØŒ± Œ∫Œ±Œ∏ŒøŒ¥Œ∑Œ≥ŒøœçŒºŒµŒΩŒ∑ Œ±œÄŒµŒπŒ∫ŒøŒΩŒπœÉœÑŒπŒ∫Œ¨ (IGRT)",
                category: "Radiotherapy",
                description: "Image-guided radiation therapy using advanced imaging techniques"
            },
            inputElement: "title",
            arrayOfObjects: [
                {"PracticeTypeID": 20, "ApplicationCategoryID": 3, "PracticeID": 20, "PracticeTypeTitle": "ŒúŒ±œÉœÑŒøŒ≥œÅŒ±œÜŒØŒµœÇ œÑŒøŒºŒøœÉœçŒΩŒ∏ŒµœÉŒ∑œÇ Œ∫Œ±Œπ œÉœÑŒµœÅŒµŒøœÑŒ±Œ∫œÑŒπŒ∫ŒÆœÇ Œ≤ŒπŒøœàŒØŒ±œÇ ŒµŒΩœÑœåœÇ œÑŒºŒ∑ŒºŒ¨œÑœâŒΩ ŒπŒ±œÑœÅŒπŒ∫ŒÆœÇ Œ±œÄŒµŒπŒ∫œåŒΩŒπœÉŒ∑œÇ, ŒΩŒøœÉŒøŒ∫ŒøŒºŒµŒØŒøœÖ ŒÆ ŒπŒ¥ŒπœâœÑŒπŒ∫ŒÆœÇ Œ∫ŒªŒπŒΩŒπŒ∫ŒÆœÇ/Œ¥ŒπŒ±Œ≥ŒΩœâœÉœÑŒπŒ∫Œøœç Œ∫Œ≠ŒΩœÑœÅŒøœÖ"},
                {"PracticeTypeID": 21, "ApplicationCategoryID": 3, "PracticeID": 20, "PracticeTypeTitle": "ŒîŒπŒ±Œ≥ŒΩœâœÉœÑŒπŒ∫ŒÆ Œ∫Œ±Œπ ŒµœÄŒµŒºŒ≤Œ±œÑŒπŒ∫ŒÆ Œ±Œ∫œÑŒπŒΩŒøœÉŒ∫œåœÄŒ∑œÉŒ∑ ŒµŒΩœÑœåœÇ œÑŒºŒÆŒºŒ±œÑŒøœÇ ŒπŒ±œÑœÅŒπŒ∫ŒÆœÇ Œ±œÄŒµŒπŒ∫œåŒΩŒπœÉŒ∑œÇ ŒΩŒøœÉŒøŒ∫ŒøŒºŒµŒØŒøœÖ ŒÆ ŒπŒ¥ŒπœâœÑŒπŒ∫ŒÆœÇ Œ∫ŒªŒπŒΩŒπŒ∫ŒÆœÇ"},
                {"PracticeTypeID": 22, "ApplicationCategoryID": 3, "PracticeID": 20, "PracticeTypeTitle": "ŒîŒπŒ±Œ≥ŒΩœâœÉœÑŒπŒ∫ŒÆ Œ∫Œ±Œπ ŒµœÄŒµŒºŒ≤Œ±œÑŒπŒ∫ŒÆ Œ±Œ∫œÑŒπŒΩŒøœÉŒ∫œåœÄŒ∑œÉŒ∑ ŒµŒ∫œÑœåœÇ œÑŒºŒÆŒºŒ±œÑŒøœÇ ŒπŒ±œÑœÅŒπŒ∫ŒÆœÇ Œ±œÄŒµŒπŒ∫œåŒΩŒπœÉŒ∑œÇ ŒµŒΩœÑœåœÇ ŒΩŒøœÉŒøŒ∫ŒøŒºŒµŒØŒøœÖ\r\nŒÆ ŒπŒ¥ŒπœâœÑŒπŒ∫ŒÆœÇ Œ∫ŒªŒπŒΩŒπŒ∫ŒÆœÇ (œåœÄœâœÇ ŒµŒΩŒ¥ŒµŒπŒ∫œÑŒπŒ∫Œ¨ œÑŒºŒÆŒºŒ±œÑŒ± ŒøœÅŒ∏ŒøœÄŒ±ŒπŒ¥ŒπŒ∫Œ¨, Œ≥Œ±œÉœÑœÅŒµŒΩœÑŒµœÅŒøŒªŒøŒ≥ŒπŒ∫Œ¨, ŒøœÖœÅŒøŒªŒøŒ≥ŒπŒ∫Œ¨,\r\nœáŒµŒπœÅŒøœÖœÅŒ≥ŒπŒ∫Œ¨, Œ±Œ≥Œ≥ŒµŒπŒøœáŒµŒπœÅŒøœÖœÅŒ≥ŒπŒ∫Œ¨, Œ∫ŒªœÄ)"},
                {"PracticeTypeID": 23, "ApplicationCategoryID": 3, "PracticeID": 20, "PracticeTypeTitle": "ŒîŒπŒ±Œ≥ŒΩœâœÉœÑŒπŒ∫ŒÆ Œ∫Œ±Œπ ŒµœÄŒµŒºŒ≤Œ±œÑŒπŒ∫ŒÆ œÖœÄŒøŒªŒøŒ≥ŒπœÉœÑŒπŒ∫ŒÆ œÑŒøŒºŒøŒ≥œÅŒ±œÜŒØŒ± ŒµŒΩœÑœåœÇ œÑŒºŒÆŒºŒ±œÑŒøœÇ ŒπŒ±œÑœÅŒπŒ∫ŒÆœÇ Œ±œÄŒµŒπŒ∫œåŒΩŒπœÉŒ∑œÇ\r\nŒΩŒøœÉŒøŒ∫ŒøŒºŒµŒØŒøœÖ ŒÆ ŒπŒ¥ŒπœâœÑŒπŒ∫ŒÆœÇ Œ∫ŒªŒπŒΩŒπŒ∫ŒÆœÇ/Œ¥ŒπŒ±Œ≥ŒΩœâœÉœÑŒπŒ∫Œøœç Œ∫Œ≠ŒΩœÑœÅŒøœÖ"},
                {"PracticeTypeID": 24, "ApplicationCategoryID": 3, "PracticeID": 20, "PracticeTypeTitle": "ŒïœÄŒµŒºŒ≤Œ±œÑŒπŒ∫Œ≠œÇ Œ±Œ∫œÑŒπŒΩŒøŒªŒøŒ≥ŒπŒ∫Œ≠œÇ œÄœÅŒ±Œ∫œÑŒπŒ∫Œ≠œÇ œÉŒµ Œ±Œ≥Œ≥ŒµŒπŒøŒ≥œÅŒ¨œÜŒø ŒµŒΩœÑœåœÇ œÑŒºŒÆŒºŒ±œÑŒøœÇ ŒπŒ±œÑœÅŒπŒ∫ŒÆœÇ Œ±œÄŒµŒπŒ∫œåŒΩŒπœÉŒ∑œÇ\r\nŒΩŒøœÉŒøŒ∫ŒøŒºŒµŒØŒøœÖ ŒÆ ŒπŒ¥ŒπœâœÑŒπŒ∫ŒÆœÇ Œ∫ŒªŒπŒΩŒπŒ∫ŒÆœÇ"},
                {"PracticeTypeID": 25, "ApplicationCategoryID": 3, "PracticeID": 20, "PracticeTypeTitle": "ŒïœÄŒµŒºŒ≤Œ±œÑŒπŒ∫Œ≠œÇ Œ∫Œ±œÅŒ¥ŒπŒøŒªŒøŒ≥ŒπŒ∫Œ≠œÇ œÄœÅŒ±Œ∫œÑŒπŒ∫Œ≠œÇ (œåœÄœâœÇ ŒµŒΩŒ¥ŒµŒπŒ∫œÑŒπŒ∫Œ¨ Œ±ŒπŒºŒøŒ¥œÖŒΩŒ±ŒºŒπŒ∫ŒÆ-Œ∑ŒªŒµŒ∫œÑœÅŒøœÜœÖœÉŒπŒøŒªŒøŒ≥ŒØŒ±œÑŒøœÄŒøŒ∏Œ≠œÑŒ∑œÉŒ∑ Œ≤Œ∑ŒºŒ±œÑŒøŒ¥ŒøœÑœéŒΩ/Œ±œÄŒπŒΩŒπŒ¥œâœÑœéŒΩ, Œ±ŒΩœÑŒπŒ∫Œ±œÑŒ¨œÉœÑŒ±œÉŒ∑ Œ≤Œ±ŒªŒ≤ŒØŒ¥œâŒΩ) œÉŒµ œÉœÑŒµœÜŒ±ŒΩŒπŒøŒ≥œÅŒ¨œÜŒø ŒµŒΩœÑœåœÇ\r\nŒΩŒøœÉŒøŒ∫ŒøŒºŒµŒØŒøœÖ ŒÆ ŒπŒ¥ŒπœâœÑŒπŒ∫ŒÆœÇ Œ∫ŒªŒπŒΩŒπŒ∫ŒÆœÇ"},
                {"PracticeTypeID": 26, "ApplicationCategoryID": 3, "PracticeID": 20, "PracticeTypeTitle": "ŒõŒµŒπœÑŒøœÖœÅŒ≥ŒØŒ± ŒµŒæŒøŒºŒøŒπœâœÑŒÆ œÉœÑŒ∑ŒΩ Œ±Œ∫œÑŒπŒΩŒøŒ∏ŒµœÅŒ±œÄŒµŒØŒ±"},
                {"PracticeTypeID": 27, "ApplicationCategoryID": 3, "PracticeID": 20, "PracticeTypeTitle": "ŒïŒæœâœÑŒµœÅŒπŒ∫ŒÆ Œ±Œ∫œÑŒπŒΩŒøŒ∏ŒµœÅŒ±œÄŒµŒØŒ± ŒºŒµ (Œ±) Œ±Œ∫œÑŒØŒΩŒµœÇ Œß (Œ≤) Œ¥Œ≠œÉŒºŒµœÇ Œ∑ŒªŒµŒ∫œÑœÅŒøŒΩŒØœâŒΩ"},
                {"PracticeTypeID": 28, "ApplicationCategoryID": 3, "PracticeID": 20, "PracticeTypeTitle": "(Œ±) ŒïŒæœâœÑŒµœÅŒπŒ∫ŒÆ Œ±Œ∫œÑŒπŒΩŒøŒ∏ŒµœÅŒ±œÄŒµŒØŒ± Œ¥ŒπŒ±ŒºŒøœÅœÜŒøœçŒºŒµŒΩŒ∑œÇ Œ≠ŒΩœÑŒ±œÉŒ∑œÇ Œ±Œ∫œÑŒπŒΩŒøŒ≤œåŒªŒ∑œÉŒ∑œÇ (IMRT), (Œ≤) Œ±Œ∫œÑŒπŒΩŒøŒ∏ŒµœÅŒ±œÄŒµŒØŒ±\r\nŒ∫Œ±Œ∏ŒøŒ¥Œ∑Œ≥ŒøœçŒºŒµŒΩŒ∑ Œ±œÄŒµŒπŒ∫ŒøŒΩŒπœÉœÑŒπŒ∫Œ¨ (IGRT), (Œ≥) ŒøŒ≥Œ∫ŒøŒºŒµœÑœÅŒπŒ∫ŒÆ Œ±Œ∫œÑŒπŒΩŒøŒ∏ŒµœÅŒ±œÄŒµŒØŒ± Œ¥ŒπŒ±ŒºŒøœÅœÜŒøœçŒºŒµŒΩŒ∑œÇ Œ≠ŒΩœÑŒ±œÉŒ∑œÇ (VMAT),\r\n(Œ¥) œÉœÑŒµœÅŒµŒøœÑŒ±Œ∫œÑŒπŒ∫ŒÆ‚Äì Œ±Œ∫œÑŒπŒΩŒøœáŒµŒπœÅŒøœÖœÅŒ≥ŒπŒ∫ŒÆ (SRS , SBRT) ŒºŒµ Œ¥Œ≠œÉŒºŒµœÇ Œ±Œ∫œÑŒØŒΩœâŒΩ Œß"},
                {"PracticeTypeID": 29, "ApplicationCategoryID": 3, "PracticeID": 20, "PracticeTypeTitle": "ŒüŒªœåœÉœâŒºŒ∑ Œ±Œ∫œÑŒπŒΩŒøŒ≤œåŒªŒ∑œÉŒ∑ (TBI)"},
                {"PracticeTypeID": 30, "ApplicationCategoryID": 3, "PracticeID": 20, "PracticeTypeTitle": "ŒíœÅŒ±œáœÖŒ∏ŒµœÅŒ±œÄŒµŒØŒ± ŒºŒµ œáœÅŒÆœÉŒ∑ Œ±Œ∫œÑŒØŒΩœâŒΩ Œß"}
            ],
            elementToCheck: "PracticeTypeTitle"
        };
        
        const response1 = await axios.post(`${SERVER_URL}/compare`, medicalData);
        const result1 = response1.data;
        
        console.log(`‚úÖ Input Object:`, result1.inputObject);
        console.log(`üìù Input String: "${result1.inputString}"`);
        console.log(`üìä Found ${result1.resultsReturned} matches out of ${result1.totalCompared} practices\n`);
        
        console.log('Top 3 matches:');
        result1.results.slice(0, 3).forEach((match, index) => {
            console.log(`${index + 1}. Score: ${match.score} - "${match.targetString.substring(0, 80)}..."`);
        });
        
        // Test 2: Product search with different input element
        console.log('\n2. Testing product search with description...');
        const productData = {
            inputObject: {
                id: 1,
                name: "iPhone 15 Pro Max",
                description: "Latest iPhone with advanced camera system and A17 Pro chip",
                price: 1199,
                category: "Smartphones"
            },
            inputElement: "description",
            arrayOfObjects: [
                { id: 1, name: "iPhone 15 Pro Max 256GB", description: "Latest iPhone with advanced camera system", price: 1199, category: "phones" },
                { id: 2, name: "iPhone 15 Pro 128GB", description: "Pro iPhone with titanium design", price: 999, category: "phones" },
                { id: 3, name: "Samsung Galaxy S24 Ultra", description: "Android flagship with S Pen", price: 1299, category: "phones" },
                { id: 4, name: "MacBook Pro 16-inch", description: "Professional laptop with M3 chip", price: 2499, category: "laptops" }
            ],
            elementToCheck: "description"
        };
        
        const response2 = await axios.post(`${SERVER_URL}/compare`, productData);
        const result2 = response2.data;
        
        console.log(`‚úÖ Input Object:`, result2.inputObject);
        console.log(`üìù Input String: "${result2.inputString}"`);
        console.log(`üìä Found ${result2.resultsReturned} matches out of ${result2.totalCompared} products\n`);
        
        console.log('Product matches:');
        result2.results.forEach((match, index) => {
            console.log(`${index + 1}. [${match.originalObject.category}] ${match.originalObject.name} - Score: ${match.score}`);
        });
        
        // Test 3: Error handling - missing inputElement
        console.log('\n3. Testing error handling (missing inputElement)...');
        try {
            await axios.post(`${SERVER_URL}/compare`, {
                inputObject: { id: 1, text: "Hello world" },
                arrayOfObjects: [{ id: 1, text: "Hello" }],
                elementToCheck: "text"
            });
        } catch (error) {
            console.log('‚úÖ Error properly caught:', error.response.data.error);
        }
        
    } catch (error) {
        console.error('‚ùå Test failed:', error.message);
        if (error.response) {
            console.error('Response data:', error.response.data);
        }
    }
}

testNewAPI();
